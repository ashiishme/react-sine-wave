{"version":3,"sources":["app/hooks/useCanvas.ts","app/hooks/useResponsiveSize.ts","app/lib/wave.ts","app/hooks/useColorGenerator.ts","app/components/wave/wave.tsx","app/components/canvas/canvas.tsx","app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["CanvasContext","createContext","context","undefined","useResponsiveSize","useState","width","setWidth","height","setHeight","setSizes","useCallback","window","innerWidth","innerHeight","useEffect","addEventListener","Wave","waveLength","color","draw","frequency","beginPath","moveTo","length","i","wave1","Math","sin","wave2","wave3","lineTo","fillStyle","fill","closePath","this","useColorGenerator","randomInteger","floor","random","generateColor","red","green","blue","frontWave","backWave","useContext","colors","timer","waves","WaveObj","render","clearRect","Object","entries","forEach","waveName","wave","waveColor","requestAnimationFrame","Canvas","canvasRef","useRef","setContext","ctx","current","getContext","Provider","value","id","ref","App","className","target","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5afb52ee.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\n\nexport const CanvasContext = createContext<{\n    context: CanvasRenderingContext2D | undefined;\n}>({\n    context: undefined,\n});\n\nexport const useCanvasContext = () => {\n    return useContext(CanvasContext);\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useResponsiveSize = () => {\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const setSizes = useCallback(() => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n    }, [setWidth, setHeight]);\n\n    useEffect(() => {\n        window.addEventListener('resize', setSizes);\n        setSizes();\n    }, [setSizes]);\n\n    return { width, height };\n};\n\nexport default useResponsiveSize;\n","class Wave {\n  private waveLength: number[]\n  private color: string\n\n  constructor(waveLength: number[], color: string) {\n    this.waveLength = waveLength\n    this.color = color\n  }\n\n  public set waveColor(color: string) {\n    this.color = color\n  }\n\n  public draw = (\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    frequency: number\n  ): void => {\n    context.beginPath()\n    context.moveTo(0, height)\n    if (this.waveLength.length < 3) {\n      return\n    }\n    for (let i = 0; i < width; i++) {\n      let wave1 = Math.sin(i * this.waveLength[0] - frequency)\n      let wave2 = Math.sin(i * this.waveLength[1] - frequency)\n      let wave3 = Math.sin(i * this.waveLength[2] - frequency)\n\n      context.lineTo(i * 2.5, height - 400 + wave1 * wave2 * wave3 * 200)\n    }\n    context.lineTo(width, height)\n    context.fillStyle = this.color\n    context.fill()\n    context.closePath()\n  }\n}\n\nexport default Wave\n","const useColorGenerator = () => {\n  const randomInteger = () => Math.floor(Math.random() * 180)\n\n  const generateColor = () => {\n    const red = randomInteger()\n    const green = randomInteger()\n    const blue = randomInteger()\n    return {\n      frontWave: `rgba(${red}, ${green}, ${blue}, 0.88)`,\n      backWave: `rgba(${red}, ${green}, ${blue}, 0.48)`,\n    }\n  }\n\n  return {\n    generateColor,\n  }\n}\n\nexport default useColorGenerator\n","import { FC } from 'react'\nimport { useCanvasContext } from 'app/hooks/useCanvas'\nimport useResponsiveSize from 'app/hooks/useResponsiveSize'\nimport { default as WaveObj } from 'app/lib/wave'\nimport useColorGenerator from 'app/hooks/useColorGenerator'\n\nconst Wave: FC = () => {\n  const { context } = useCanvasContext()\n  const { width, height } = useResponsiveSize()\n  const { generateColor } = useColorGenerator()\n\n  let frequency = 0.013\n  let colors: { [key: string]: string } = generateColor()\n  let timer = 1\n  const waves = {\n    frontWave: new WaveObj([0.0211, 0.028, 0.015], 'rgba(255,179,0,0.88)'),\n    backWave: new WaveObj([0.0122, 0.018, 0.005], 'rgba(255,179,0,0.48)'),\n  }\n\n  const render = () => {\n    context?.clearRect(0, 0, width, height)\n    Object.entries(waves).forEach(([waveName, wave]) => {\n      wave.waveColor = colors[waveName]\n      wave.draw(context!, width, height, frequency)\n    })\n    if (timer === 500) {\n      colors = generateColor()\n      timer = 1\n    }\n    timer++\n    frequency += 0.013\n    requestAnimationFrame(render)\n  }\n  if (context) render()\n  return null\n}\n\nexport default Wave\n","import { useRef, FC, useEffect, useState } from 'react';\n\nimport { CanvasContext } from 'app/hooks/useCanvas';\nimport useResponsiveSize from 'app/hooks/useResponsiveSize';\nimport Wave from '../wave';\n\nconst Canvas: FC = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const { width, height } = useResponsiveSize();\n\n    const [context, setContext] =\n        useState<CanvasRenderingContext2D | undefined>();\n\n    useEffect(() => {\n        const ctx = canvasRef?.current?.getContext('2d');\n        if (ctx) setContext(ctx);\n    }, []);\n\n    return (\n        <>\n            <CanvasContext.Provider value={{ context: context }}>\n                <canvas\n                    id=\"canvas\"\n                    ref={canvasRef}\n                    width={width}\n                    height={height}\n                ></canvas>\n                <Wave />\n            </CanvasContext.Provider>\n        </>\n    );\n};\n\nexport default Canvas;\n","import React from 'react';\n\nimport Canvas from 'app/components/canvas';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"header-info\">\n                <h1 className=\"app-title\">React Sine Wave</h1>\n                <p className=\"project-source\">\n                    <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href=\"https://github.com/ashiishme/react-sine-wave\"\n                    >\n                        [ Find project on GitHub ]\n                    </a>\n                </p>\n            </div>\n\n            <Canvas />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}