{"version":3,"sources":["app/hooks/useCanvas.ts","app/hooks/useResponsiveSize.ts","app/lib/wave.ts","app/components/wave/wave.tsx","app/components/canvas/canvas.tsx","app/index.tsx","reportWebVitals.ts","index.tsx"],"names":["CanvasContext","createContext","context","undefined","useResponsiveSize","useState","width","setWidth","height","setHeight","setSizes","useCallback","window","innerWidth","innerHeight","useEffect","addEventListener","Wave","waveLength","color","draw","frequency","beginPath","moveTo","length","i","wave1","Math","sin","wave2","wave3","lineTo","fillStyle","fill","closePath","this","useContext","waves","frontWave","WaveObj","backWave","render","clearRect","Object","entries","forEach","requestAnimationFrame","Canvas","canvasRef","useRef","setContext","ctx","current","getContext","Provider","value","id","ref","App","className","target","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed03f729.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\n\nexport const CanvasContext = createContext<{\n    context: CanvasRenderingContext2D | undefined;\n}>({\n    context: undefined,\n});\n\nexport const useCanvasContext = () => {\n    return useContext(CanvasContext);\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useResponsiveSize = () => {\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const setSizes = useCallback(() => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n    }, [setWidth, setHeight]);\n\n    useEffect(() => {\n        window.addEventListener('resize', setSizes);\n        setSizes();\n    }, [setSizes]);\n\n    return { width, height };\n};\n\nexport default useResponsiveSize;\n","class Wave {\n    private waveLength: number[];\n    private color: string;\n\n    constructor(waveLength: number[], color: string) {\n        this.waveLength = waveLength;\n        this.color = color;\n    }\n\n    public draw = (\n        context: CanvasRenderingContext2D,\n        width: number,\n        height: number,\n        frequency: number\n    ): void => {\n        context.beginPath();\n        context.moveTo(0, height);\n        if (this.waveLength.length < 3) {\n            return;\n        }\n        for (let i = 0; i < width; i++) {\n            let wave1 = Math.sin(i * this.waveLength[0] - frequency);\n            let wave2 = Math.sin(i * this.waveLength[1] - frequency);\n            let wave3 = Math.sin(i * this.waveLength[2] - frequency);\n\n            context.lineTo(i * 2.5, height - 400 + wave1 * wave2 * wave3 * 200);\n        }\n        context.lineTo(width, height);\n        context.fillStyle = this.color;\n        context.fill();\n        context.closePath();\n    };\n}\n\nexport default Wave;\n","import { FC } from 'react';\nimport { useCanvasContext } from 'app/hooks/useCanvas';\nimport useResponsiveSize from 'app/hooks/useResponsiveSize';\nimport { default as WaveObj } from 'app/lib/wave';\n\nconst Wave: FC = () => {\n    const { context } = useCanvasContext();\n    const { width, height } = useResponsiveSize();\n    let frequency = 0.013;\n    const waves = {\n        frontWave: new WaveObj([0.0211, 0.028, 0.015], 'rgba(255,179,0,0.88)'),\n        backWave: new WaveObj([0.0122, 0.018, 0.005], 'rgba(255,179,0,0.48)'),\n    };\n\n    const render = () => {\n        context?.clearRect(0, 0, width, height);\n        Object.entries(waves).forEach(([, wave]) => {\n            wave.draw(context!, width, height, frequency);\n        });\n        frequency += 0.013;\n        requestAnimationFrame(render);\n    };\n    if (context) render();\n    return null;\n};\n\nexport default Wave;\n","import { useRef, FC, useEffect, useState } from 'react';\n\nimport { CanvasContext } from 'app/hooks/useCanvas';\nimport useResponsiveSize from 'app/hooks/useResponsiveSize';\nimport Wave from '../wave';\n\nconst Canvas: FC = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const { width, height } = useResponsiveSize();\n\n    const [context, setContext] =\n        useState<CanvasRenderingContext2D | undefined>();\n\n    useEffect(() => {\n        const ctx = canvasRef?.current?.getContext('2d');\n        if (ctx) setContext(ctx);\n    }, []);\n\n    return (\n        <>\n            <CanvasContext.Provider value={{ context: context }}>\n                <canvas\n                    id=\"canvas\"\n                    ref={canvasRef}\n                    width={width}\n                    height={height}\n                ></canvas>\n                <Wave />\n            </CanvasContext.Provider>\n        </>\n    );\n};\n\nexport default Canvas;\n","import React from 'react';\n\nimport Canvas from 'app/components/canvas';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"header-info\">\n                <h1 className=\"app-title\">React Sine Wave</h1>\n                <p className=\"project-source\">\n                    <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href=\"https://github.com/ashiishme/react-sine-wave\"\n                    >\n                        [ Find project on GitHub ]\n                    </a>\n                </p>\n            </div>\n\n            <Canvas />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}